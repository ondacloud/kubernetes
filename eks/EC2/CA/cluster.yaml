apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: <EKS Cluster name>
  version: "<EKS version>"
  region: <region>

cloudWatch:
  clusterLogging:
    enableTypes: ["*"]

iamIdentityMappings:
  - arn: arn:aws:iam::<Account ID>:role/<Role name>
    groups:
      - system:masters
    username: admin
    noDuplicateARNs: true

iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: aws-load-balancer-controller
      namespace: kube-system
    wellKnownPolicies:
      awsLoadBalancerController: true
  - metadata:
      name: cert-manager
      namespace: cert-manager
    wellKnownPolicies:
      certManager: true
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    wellKnownPolicies:
      autoScaler: true
  - metadata:
      name: autoscaler-service
      namespace: kube-system
    attachPolicy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "autoscaling:DescribeAutoScalingGroups"
        - "autoscaling:DescribeAutoScalingInstances"
        - "autoscaling:DescribeLaunchConfigurations"
        - "autoscaling:DescribeTags"
        - "autoscaling:SetDesiredCapacity"
        - "autoscaling:TerminateInstanceInAutoScalingGroup"
        - "ec2:DescribeLaunchTemplateVersions"
        Resource: '*'

vpc:
  subnets:
    public:
      <region>a: { id: public_a }
      <region>b: { id: public_b }
      <region>c: { id: public_c }
    private:
      <region>a: { id: private_a }
      <region>b: { id: private_b }
      <region>c: { id: private_c }
      
managedNodeGroups:
  - name: <Worker Node Group name>
    labels: { <key>: <value> }
    instanceName: <Instance name>
    instanceType: <Instance Type>
    desiredCapacity: 3
    minSize: 3
    maxSize: 20
    privateNetworking: true
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/edu-eks-cluster: "owned"
